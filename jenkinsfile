pipeline {
    agent any

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.50.4:8081"
        NEXUS_REPOSITORY = "foyer"
        NEXUS_CREDENTIAL_ID = "nexus"

        DOCKER_HUB_CREDENTIAL_ID = "dockerhub"
        DOCKER_HUB_REPO = "montahb21/tp-foyer" // Replace with your Docker Hub repository
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Montah21/foyer-pipeline'
            }
        }

        stage('Set Permissions') {
            steps {
                sh 'chmod +x ./mvnw'
            }
        }

        stage('Compile') {
            steps {
                sh './mvnw clean compile'
            }
        }

        stage('Test') {
            steps {
                sh './mvnw test'
            }
        }

        stage('Package') {
            steps {
                sh './mvnw clean package'
                sh 'ls -l target/'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner -X"
                    }
                }
            }
        }

        stage('Building Docker Image') {
            steps {
                script {
                    sh 'docker-compose build'
                }
            }
        }

        stage('Publish to Nexus') {
            steps {
                script {
                    try {
                        // Ensure the JAR exists before uploading
                        if (fileExists('target/tp-foyer-1.0.0-SNAPSHOT.jar')) {
                            echo "Uploading artifact to Nexus"
                            nexusArtifactUploader(
                                artifacts: [[
                                    artifactId: 'tp-foyer',
                                    classifier: '',
                                    file: 'target/tp-foyer-1.0.0-SNAPSHOT.jar',
                                    type: 'jar'
                                ]],
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                groupId: 'tn.esprit',
                                nexusUrl: "${NEXUS_PROTOCOL}://${NEXUS_URL}",
                                nexusVersion: NEXUS_VERSION,
                                repository: NEXUS_REPOSITORY,
                                version: '1.0.0-SNAPSHOT'
                            )
                            echo "Artifact uploaded successfully"
                        } else {
                            error "JAR file 'target/tp-foyer-1.0.0-SNAPSHOT.jar' not found"
                        }
                    } catch (Exception e) {
                        echo "Failed to publish to Nexus: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Run Application') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
            post {
                success {
                    echo 'Application stage completed successfully'
                }
                failure {
                    echo 'Application stage failed'
                }
            }
        }

        stage('Run Prometheus') {
            steps {
                script {
                    def prometheusRunning = sh(script: 'docker ps --filter "name=prometheus" --format "{{.Names}}"', returnStdout: true).trim()

                    if (prometheusRunning.isEmpty()) {
                        sh 'docker run -d --name prometheus -p 9090:9090 prom/prometheus'
                    } else {
                        echo 'Prometheus container is already running'
                    }
                }
            }
            post {
                success {
                    echo 'Prometheus stage completed successfully'
                }
                failure {
                    echo 'Prometheus stage failed'
                }
            }
        }

        stage('Run Grafana') {
            steps {
                script {
                    def grafanaRunning = sh(script: 'docker ps
