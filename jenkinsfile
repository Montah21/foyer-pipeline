pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://192.168.50.4:8081' // Base URL without repository
        NEXUS_REPOSITORY = 'foyer' // Your Nexus repository name
        NEXUS_CREDENTIALS_ID = 'nexus' // The ID you set for your credentials

        DOCKER_HUB_CREDENTIAL_ID = "dockerhub"
        DOCKER_HUB_REPO = "montahb21/tp-foyer" // Replace with your Docker Hub repository
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Montah21/foyer-pipeline'
            }
        }

        stage('Set Permissions') {
            steps {
                sh 'chmod +x ./mvnw'
            }
        }

        stage('Compile') {
            steps {
                sh './mvnw clean compile'
            }
        }

        stage('Mockito Test') {
            steps {
                sh './mvnw test'
            }
        }

        stage('Package') {
            steps {
                sh './mvnw clean package'
                sh 'ls -l target/'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner -X"
                    }
                }
            }
        }

        stage('Building Docker Image') {
            steps {
                script {
                    sh 'docker-compose build'
                }
            }
        }

        stage('Run Application') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
            post {
                success {
                    echo 'Application stage completed successfully'
                }
                failure {
                    echo 'Application stage failed'
                }
            }
        }

        stage('Run Prometheus') {
            steps {
                script {
                    def prometheusRunning = sh(script: 'docker ps --filter "name=prometheus" --format "{{.Names}}"', returnStdout: true).trim()

                    if (prometheusRunning.isEmpty()) {
                        sh 'docker run -d --name prometheus -p 9090:9090 prom/prometheus'
                    } else {
                        echo 'Prometheus container is already running'
                    }
                }
            }
            post {
                success {
                    echo 'Prometheus stage completed successfully'
                }
                failure {
                    echo 'Prometheus stage failed'
                }
            }
        }

        stage('Run Grafana') {
            steps {
                script {
                    def grafanaRunning = sh(script: 'docker ps --filter "name=grafana" --format "{{.Names}}"', returnStdout: true).trim()

                    if (grafanaRunning.isEmpty()) {
                        sh 'docker run -d --name grafana -p 3000:3000 grafana/grafana'
                    } else {
                        echo 'Grafana container is already running'
                    }
                }
            }
            post {
                success {
                    echo 'Grafana stage completed successfully'
                }
                failure {
                    echo 'Grafana stage failed'
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo 'Deploying to Nexus Repository...'

                    withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh '''
                            ./mvnw clean deploy -DskipTests \
                            -Dmaven.deploy.skip=false \
                            -DrepositoryId=deploymentRepo \
                            -Durl=$NEXUS_URL/repository/$NEXUS_REPOSITORY
                        '''
                    }
                }
            }
            post {
                success {
                    echo 'Deployment to Nexus Repository completed successfully'
                }
                failure {
                    echo 'Deployment to Nexus Repository failed'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    try {
                        echo "Starting Docker Hub authentication"
                        docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIAL_ID) {
                            def app = docker.build("${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}")
                            echo "Docker image built successfully"
                            app.push()
                            echo "Docker image pushed successfully"
                        }
                    } catch (Exception e) {
                        echo "Error occurred: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
            post {
                success {
                    echo 'Docker image pushed to Docker Hub successfully'
                }
                failure {
                    echo 'Docker image push to Docker Hub failed'
                }
            }
        }
    }

    post {
        always {
            junit 'target/surefire-reports/*.xml'
            cleanWs()
        }
    }
}

